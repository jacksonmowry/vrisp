#+title: Paper
#+subtitle: Jackson Mowry
#+author: jmowry4@vols.utk.edu
#+date: 5/7/24
#+OPTIONS: toc:nil
#+setupfile: ~/jacksonmowry.github.io/two.setup

* Introduction
* Related Work
* The VRISP Neuroprocessor
VRISP is a neuroprocessor designed to take full advantage of modern SIMD/vector instructions. Similar to RISP[?], VRISP aims to be a simple neuroprocessor, while making further simplifications to enable further improved simulation performance. The notable features lacking from risp are support for floating point values (weights and thresholds), and the support for adding noise to synapse charge potentiation.

In order to gain most of the speed benefits VRISP employs an entirely different architecture than RISP. Instead of tracking a neurons state at any single point in time, a fixed number of time steps are tracked creating a collection of vectors for each neuron. These vectors are then organized in a continuous region of memory forming a matrix of neuron charges. The design eliminates the need for dynamic memory allocation, and allows for scatter/gather instruction to manipulate memory. The remaining data tracked within the processor is all stored in single dimension vectors, allowing for vector load/store instructions to support processing multiple neurons simultaneously.

** Simulation Overview
# This really needs to be discussed with Plank/Rizzo/Bryson. Which path makes sense, fired/synapses/full? Or does it make sense to present all solutions? Although saying that, I don't think fired has much of application as its performance closely matches the non handwritten vector code

At a high level there are 2 potential sections of code that would benefit from vector processing, the calculation of which neurons should fire at a given time step, and the potentiation of charge down each synapse of a firing neuron.

* Open-Source
* Example Workflow
* RVV Stuff?
* Performance
* Conclusion and Future Work

#  LocalWords:  VRISP Neuroprocessor SIMD potentiation
